package com.flaxash.transitionParticules{       //imports - the less the better    import flash.geom.Rectangle;    import flash.geom.Vector3D;	     public class Particle {         //define the position and velocity Vector3D objects        public var pos:Vector3D = new Vector3D(0,0);        //the velocity of the particle is between +3 and -3 for x and y        private var vel:Vector3D = new Vector3D(-10 + Math.random()*5,rand(5));         //define the bounds and default color of the particle        private var bounds:Rectangle;        public var color:uint;		private var origX:Number;		private var origY:Number;		private var t:Number=0;		private var pas:Number = Math.random()/10;		public var tox:Number;		public var toy:Number;		        public function Particle(_couleur:uint=0,_origX:Number=0,_origY:Number=0) {  			color = _couleur;			origX = _origX;			origY = _origY;			pos.x = origX;			pos.y = origY;			tox=origX;			toy=origY;            //the bounding area of the stage is passed into the constructor            //we do not need to pass the entire instance of the stage as this will require more memory           // bounds = stageRect;         }        private function rand(n:int):Number{             //this function returns a random number between -n and n            return n - (n * 2 * Math.random())        }        public function update ():void{ 			if (t<6*Math.PI) {				t +=pas;							}            //add the respective velocities to the position            pos.x += vel.x + 5*(t/2*Math.cos(t));            pos.y += vel.y + 5*(t/2*Math.sin(t));			//pos.x = origX + 10*(t/2*Math.cos(t)-t) + vel.x;			//pos.y = origY + 10*t/2*Math.sin(t) + vel.y; 			vel.x -= vel.x/20;			vel.y -= vel.y/20;						//32bit - déconstruis la couleur			var a:uint = color >> 24 & 0xFF;			var r:uint = color >> 16 & 0xFF;			var g:uint = color >>  8 & 0xFF;			var b:uint = color & 0xFF;			a -= a/40;			//32bit - reconstruis la couleur			color = a << 24 | r << 16 | g << 8 | b;			            //check if the particle is outside the bounds of the rectangle            //checkBounds();        }		public function updateByPos(target_x:Number,target_y:Number):void 		{			pos.x += (target_x - pos.x)/2;			pos.y += (target_y - pos.y)/2;						//32bit - déconstruis la couleur			var a:uint = color >> 24 & 0xFF;			var r:uint = color >> 16 & 0xFF;			var g:uint = color >>  8 & 0xFF;			var b:uint = color & 0xFF;			//a -= a/40;			//32bit - reconstruis la couleur			color = a << 24 | r << 16 | g << 8 | b;					}        private function checkBounds():void{             //this function simply checks the x,y position values and if they are            //bigger or greater than the bounds reverse the respective velocity (direction) is reversed            //if(pos.x < 0 || pos.x > bounds.width)             //if(pos.y < 0 || pos.y > bounds.height)         }    }}