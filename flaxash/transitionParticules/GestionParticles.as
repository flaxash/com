package com.flaxash.transitionParticules{	//imports	import com.greensock.TweenMax;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.utils.ByteArray;	import flash.utils.Timer;	import flash.utils.getTimer;	public class GestionParticles extends Sprite	{		//define variables		private var w:int;		private var h:int;		private var bm:Bitmap;		private var bmd:BitmapData;		private var orgBMD:BitmapData;		private var clearRect:Rectangle;		private var currentTime:int = 0;		private var holder:Vector.<Particle> = new Vector.<Particle>();		private var orgClip:MovieClip;		private var orgSquare:Rectangle;		private var stageBounds:Rectangle;		private var monTimer:Timer;		private var numPixels:Number;		public var spread:Number = 80;		public var temps:Number = 2;		public var distance:Number = 200;		//most machines should be fine with 150,000 particles.		private var n:int = 150000;		public function GestionParticles(_orgClip:MovieClip,_stageBounds:Rectangle):void		{			orgClip = _orgClip;			orgSquare = orgClip.getBounds(orgClip);			stageBounds = _stageBounds;			trace("orgSquare " + orgSquare.width +"-" +orgSquare.height);			this.addEventListener(Event.ADDED_TO_STAGE,init);		}		public function init(e:Event):void		{			w = stageBounds.width;			h = stageBounds.height;			trace("stage " + w + "-"+h);			//create the blank rectangle we will use to clear the bitmapdata			clearRect = new Rectangle(0,0,w,h);			//create the bitmap and bitmapdata			bmd = new BitmapData(w,h,true,0x00000000);			bm = new Bitmap(bmd);			addChild(bm);			setupPixels();		}		private function onFrameLoop(evt:Event):void		{			//lock the bitmap and clear it before drawing			bmd.lock();			bmd.fillRect(clearRect,0x00000000);			//for n times get the respective particle in the holder and set the			//corresponding pixel at p.x and p.y to the particles color			for (var i:int = 0; i < numPixels; i++)			{				//notice a temporary variable was used here because otherwise the object				//would need to be read 3 times from the Vector - much slower				var p:Particle = holder[i];				bmd.setPixel32(p.pos.x, p.pos.y, p.color);				//update the particles position				//p.update();				p.updateByPos(260,401);			}			//update the bitmap			bmd.unlock();			//trace the FPS			//trace(1000 / timeDifference);		}		private function setupPixels():void		{			var myMatrix:Matrix = new Matrix();			//myMatrix.tx =  -  orgSquare.x;			//myMatrix.ty =  -  orgSquare.y;			orgBMD = new BitmapData(orgClip.width,orgClip.height,true,0x00FFFFFF);			orgBMD.draw(orgClip, myMatrix);			numPixels = 0;			var rect:Rectangle = new Rectangle(0,0,orgClip.width,orgClip.height);			//var pixel_array:ByteArray = orgBMD.getPixels(rect);			for (var i:int = 0; i<orgClip.height; i+=1)			{				for (var j:int = 0; j<orgClip.width; j+=1)				{					var angle:Number = Math.random() * 360;					var radius:Number = Math.random() * spread;					var couleur:uint = orgBMD.getPixel32(j,i);					//0 lorsque transparent					//trace(couleur);					if (couleur != 0)					{									var cPixel:Particle = new Particle(couleur,orgClip.x + j,orgClip.y + i);							cPixel.pos.x = orgClip.x + j;							cPixel.pos.y = orgClip.y + i;							//cPixel.tox = Math.round(j+Math.cos(angle)*radius);							//cPixel.toy = Math.round(i+Math.sin(angle)*radius);							var newX:Number = 2 * j - orgClip.width / 2;							var newY:Number = 2 * i - orgClip.height / 2;							cPixel.tox = Math.round(newX - distance + Math.cos(angle) * radius);							cPixel.toy = Math.round(newY + Math.sin(angle) * radius);							holder.push(cPixel);							numPixels++;											}				}			}			trace(numPixels + " particules");			startMvt();		}		public function startMvt():void		{			monTimer = new Timer(40,1000);			//add listener for every frame			monTimer.addEventListener(TimerEvent.TIMER, onFrameLoop);			monTimer.addEventListener(TimerEvent.TIMER_COMPLETE,onComplete);			monTimer.start();		}		//defTweens();		private function onComplete(e:TimerEvent):void		{			TweenMax.to(this,1,{alpha:0});		}	}}